package com.mm.bth;

import javafx.application.Application;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.effect.DropShadow;
import javafx.scene.paint.Color;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

public class ChangePass extends Application {




	@Override
	public void start(Stage st) throws Exception {
		st.setTitle("Change Password");

		// Create DropShadow effect
		DropShadow shadow = new DropShadow();
		shadow.setColor(Color.GRAY);
		shadow.setRadius(5);
		shadow.setOffsetX(2);
		shadow.setOffsetY(2);

		VBox root = new VBox(15);
		root.setPadding(new Insets(20));
		root.setAlignment(Pos.CENTER);

		Label tlbl = new Label("Change Password");
		tlbl.getStyleClass().add("title-label");

		GridPane formGrid = new GridPane();
		formGrid.setHgap(10);
		formGrid.setVgap(15);
		formGrid.setAlignment(Pos.CENTER);

		Label currentplbl = new Label("Current Password");
		PasswordField currentpfield = new PasswordField();
		currentpfield.getStyleClass().add("password-field");

		Label currentpWarning = new Label("Invalid characters: / < >");
		currentpWarning.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
		currentpWarning.setVisible(false);  // Initially hidden

		// Add a filter to prevent '/', '<', and '>' input and show warning
		currentpfield.textProperty().addListener((observable, oldValue, newValue) -> {
			String filteredText = newValue.replaceAll("[/<>]", "");  // Removes '/', '<', and '>'
			currentpfield.setText(filteredText);

			// Show warning if invalid characters are entered
			if (!newValue.equals(filteredText)) {
				currentpWarning.setVisible(true);
			} else {
				currentpWarning.setVisible(false);
			}
		});

		Label newplbl = new Label("New Password");
		PasswordField newpfield = new PasswordField();
		newpfield.getStyleClass().add("password-field");

		Label newpWarning = new Label("Invalid characters: / < >");
		newpWarning.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
		newpWarning.setVisible(false);  // Initially hidden

		// Add a filter to prevent '/', '<', and '>' input and show warning
		newpfield.textProperty().addListener((observable, oldValue, newValue) -> {
			String filteredText = newValue.replaceAll("[/<>]", "");  // Removes '/', '<', and '>'
			newpfield.setText(filteredText);

			// Show warning if invalid characters are entered
			if (!newValue.equals(filteredText)) {
				newpWarning.setVisible(true);
			} else {
				newpWarning.setVisible(false);
			}
		});

		Label confirmplbl = new Label("Confirm New Password");
		PasswordField confirmpfield = new PasswordField();
		confirmpfield.getStyleClass().add("password-field");

		Label confirmpWarning = new Label("Invalid characters: / < >");
		confirmpWarning.setStyle("-fx-text-fill: red; -fx-font-size: 12px;");
		confirmpWarning.setVisible(false);  // Initially hidden

		// Add a filter to prevent '/', '<', and '>' input and show warning
		confirmpfield.textProperty().addListener((observable, oldValue, newValue) -> {
			String filteredText = newValue.replaceAll("[/<>]", "");  // Removes '/', '<', and '>'
			confirmpfield.setText(filteredText);

			// Show warning if invalid characters are entered
			if (!newValue.equals(filteredText)) {
				confirmpWarning.setVisible(true);
			} else {
				confirmpWarning.setVisible(false);
			}
		});



		// Adding labels and fields
		formGrid.add(currentplbl, 0, 0);
		formGrid.add(currentpfield, 0, 1);
		formGrid.add(currentpWarning, 0, 2);  // Add warning label beside the field

		formGrid.add(newplbl, 0, 3);
		formGrid.add(newpfield, 0, 4);
		formGrid.add(newpWarning, 0, 5);  // Add warning label beside the field

		formGrid.add(confirmplbl, 0, 6);
		formGrid.add(confirmpfield, 0, 7);
		formGrid.add(confirmpWarning, 0, 8);  // Add warning label beside the field

		HBox buttonBox = new HBox(40);
		buttonBox.setAlignment(Pos.CENTER);

		Button submitbtn = new Button("Confirm");
		Button cancelbtn = new Button("Cancel");






		submitbtn.getStyleClass().add("confirm-button");
		cancelbtn.getStyleClass().add("cancel-button");

		// Helper method to show an alert with a custom title and message


		submitbtn.setOnMouseClicked(e -> {
		    boolean isValid = true;  // Flag to track if all fields are valid

		    // Step 1: Validate Current Password
		    if (currentpfield.getText().isEmpty()) {
		        // Show alert for empty current password
		        showAlert("Missing Input", "Please enter your Current Password.");
		        currentpWarning.setVisible(true);  // Show the warning
		        isValid = false;

		    } else {
		        currentpWarning.setVisible(false);
		    }

		    // Step 2: If Current Password is valid, validate New Password
		    if (isValid) {
		        if (newpfield.getText().isEmpty()) {
		            showAlert("Missing Input", "Please enter your New Password.");
		            newpWarning.setVisible(true);
		            isValid = false;

		        } else if (currentpfield.getText().equals(newpfield.getText())) {
		            showAlert("Invalid Input", "Please choose a different New Password.");
		            newpWarning.setVisible(true);
		            isValid = false;
		        } else {
		            newpWarning.setVisible(false);
		        }
		    }

		    // Step 3: If New Password is valid, validate Confirm New Password
		    if (isValid) {
		        if (confirmpfield.getText().isEmpty()) {
		            showAlert("Missing Input", "Please confirm your New Password.");
		            confirmpWarning.setVisible(true);
		            isValid = false;

		        } else if (!newpfield.getText().equals(confirmpfield.getText())) {
		            showAlert("Invalid Input", "Please ensure both New Password and Confirm New Password are the same.");
		            confirmpWarning.setVisible(true);
		            isValid = false;
		        } else {
		            confirmpWarning.setVisible(false);
		        }
		    }

		    // If all fields are valid, proceed with submission
		    if (isValid) {
		    	Alert alert = new Alert(AlertType.INFORMATION);

				alert.setContentText("Have Been Submitted !!!");
				alert.show();
		    }
		});



		cancelbtn.setOnMouseClicked(e->{


			System.exit(0);
		});

		buttonBox.getChildren().addAll(cancelbtn, submitbtn);

		root.getChildren().addAll(tlbl, formGrid, buttonBox);
		root.getStyleClass().add("root-pane");

		Scene scene = new Scene(root, 400, 400);
		scene.getStylesheets().add(getClass().getResource("changepass.css").toExternalForm());

		st.setScene(scene);
		st.setResizable(false);
		st.show();
	}

	public static void main(String[] args) {
		launch(args);
	}

	// Helper method to show an alert with a custom title and message
	private void showAlert(String title, String message) {
	    Alert alert = new Alert(AlertType.WARNING);
	    alert.setTitle(title);
	    alert.setContentText(message);
	    alert.showAndWait();
	}


	// Helper method to validate the passwords
	private boolean isPasswordValid(PasswordField passwordField, String fieldName) {
	    String password = passwordField.getText();
	    if (password.isEmpty()) {
	        showAlert("Missing Input", "Please enter your " + fieldName + ".");
	        return false;
	    }
	    return true;
	}


}
